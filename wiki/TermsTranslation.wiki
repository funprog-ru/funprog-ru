#summary This page contain accepted translation of the terms, used in text

Please keep terms in alphabet order.

Строки помеченные в конце ?? следует внимательно рассмотреть, уточнить.

При голосовании прибавляйте индекс и записывайте себя в скобках через
запятую.

  * *bug* - дефект
  * *Church numeral(s)* - нумерал(ы) Чёрча
  * *codomain* - область (допустимых) значений
  * *const function* - константная функция ??
  * *continuation* - продолжение
  * *conversion* - преобразование
  * *conversion rules* - правила преобразования
  * *currying* - каррирование ?? (check in Harisson/Fild)
  * *define function* - определить фукнцию
  * *domain* - область определения ??
  * *eager evaluation* - энергичное вычисление
  * *evaluation* - вычисление
  * *extensionality* - экстенсиональность
  * *first class object* - объект высшего порядка / объект первого рода ??
  * *fixpoint | fixed point (of function)* - неподвижная точка (функции)
  * *floating point* - плавающая точка/запятая ??
  * *function definition* - определение функции
  * *higher order function* - функция высшего порядка
  * *identity function* - тождественное отображение
  * *lazy evaluation* - ленивое вычисление
  * *lambda-calculus* - $\lambda$-исчисление
  * *lambda-notation* - $\lambda$-нотация
  * *lecture notes* - лекционные материалы / коспекты лекций ??
  * *partial function* - частичная функция
  * *pattern matching* - сопоставление с образцом
  * *polymorphic function(s)* - полиморфные фукнция(и)
  * *pretty print* - печать в наглядной форме / структурная(ированная) печать (вывод). ??
  * *prover* - средство доказательства ??
  * *reduction* - редукция
  * *syntactic sugar* - синтаксическая обёртка
  * *tail recursion* - хвостовая (концевая) рекурсия
  * *tail recursive function* - функция с хвостовой рекурсией
  * *tuple* - кортеж
  * *type variables* - типовые переменные
  * *variable capture* - захват переменной
  * *verification* - проверка / верификация ??

== Discussion ==

Где по-английски говорят про domain / codomain, по-русски обычно говорят про "образ и прообраз функции/отображения". Соответсвенно, codomain - это образ. Если текст с большим упором в математику, то говорить "область допустимых значений" будет некорректно. -- dastapov

----

currying - у Х/Ф переводится как ''карринг''.  Если искать в гугле, то
на карринг больше ссылок чем на ''каррирование'' - 950 vs 50.  Всё же
мне больше симпотично именно ''каррирование'', звучит более русско
чтоли ..

в слове ''каррирование'' больше понятно, что это некое преобразование
(одной функции в другую), действие над чем-то.  Как например:
промывание, обрезание, и тд - преобразования одних объектов в другие --lg

Слово "карринг", конечно, калька с английского, но "каррирование" тоже
вряд ли можно счесть русским словом. При этом "карринг" действительно чаще
встречается, в том числе в бумажной литературе - например, в русском
переводе Филда и Харрисона. "Каррирование" на бумаге тоже встречается,
например, у Романа Душкина, но "карринг", все-таки, более устоявшийся термин.

Аргументом за "каррирование" может служить то, что от него проще образовывать
прилагательные: curried function - "каррированная функция". Но как существительное
"каррирование" звучит, на мой взгляд, заметно хуже, так что я за "карринг". --dimitri.timofeev

Голосование:

{{{
    каррирование - 3 (lg.zevlg, dimiii, vshabanoff)
    карринг      - 1 (dimitri.timofeev)
}}}

----

lambda-notation ещё хорошо звучит:  $\lambda$-нотация, $\lambda$-запись 

$\lambda$-запись - отлично!  $\lambda$-нотация мне не очень нравится.
Нотация больше ассоциируется с нравоучением, хотя вон в толковом
словаре написано, что у ''нотации'' есть значение "Система условных
письменных обозначений, принятая в какой-л. сфере деятельности."  На
чём остановимся? --lg

"Запись", по-моему, в контексте программирования ассоциируется
в первую очередь не с формой представления, а с блоком или структурой
данных. --dimitri.timofeev

- Но, говорят же ещё, например, о шахматной нотации? - dimiii

Ага, я передумал, теперь я за $\lambda$-нотацию, этот термин намного
чаще встречается. --lg

Голосование:

{{{
    $\lambda$-нотация     - 4 (dimitri.timofeev, lg.zevlg, alexott, dimiii)
    $\lambda$-запись      - 1 (dimiii)
    $\lambda$-обозначения - 0
}}}

----

Лучше ли будет, чтобы наш перевод терминов совпадал с переводом в Х/Ф?
Например, в переводе Х/Ф ''partial function'' переводится как
''частичная функция'', но вроде как есть устоявшийся термин для таких
функций - ''кусочная функция'', как быть?  Кстати, голосуйте активней,
господа! --lg

'кусочная функция' мне что-то не особо нравится, я не встречал такого термина. -- alexott


это устоявшийся термин в математике для функций типа sign, вот http://ric.uni-altai.ru/Fundamental/teor-alg/upr2/upr2-4.htm --lg


да - да, 'кусочная функция' это из другой оперы. 
partial function - частично вычислимая функция, как вариант.

Может быть, 'частично примененная функция' -- dastapov

У меня возникла трудность с переводом  rules of let-polymorphism
{{{
    правила вывода по полиморфизму    - 1 (dimiii)
}}}

--dimiii

мне кажется, что let-polymorphism лучше переводить как let-полиморфизм, он включает значимое слово `let'.

----

lecture notes - может как ''конспекты лекций''? --lg

----

по поводу syntactic sugar, я поискал в инете, и мало-мальски нормальный перевод это тупой перевод в синтаксический сахар, даже особо других вариантов нету :(, был ещё синтаксический подсластитель .. --lg

Можно еще 'синтаксическая обертка', которую можно 'снимать' (desugaring).

{{{
    синтаксическая обёртка       - 1 (lg)
    синтаксический сахар         - 0
    синтаксический подсластитель - 0
}}}

----

conversion, в литературе я встречал 'конверсия' достаточно часто, у Вольфенгагена, у Душкина, у некоторых других авторах, которых сейчас уже не упомню. Для меня это был уже как некий устоявшийся термин .. У Х/Ф этот термин как-то избегается, там в основном говорится о редукциях .. согласен, что фразы из разряда 'conversion rules for lambda expressions' лучше переводить как 'правила преобразований ...', но в отдельности или в связке с \alpha, \beta, \eta - всё-таки по мне так 'конверсия' как-то привычней что-ли .. --lg

По моему опыту, conversion и reduction - это почти всегда взаимозаменяемые термины. Если необходимо, их различают так - conversion будет любым преобразованием, а reduction - таким, которое уменьшает размер терма. Соответственно, можно писать и 'конверсия', и 'редукция', и преобразование - в зависимости от контекста. -- dastapov

{{{
    alpha-conversion  = alpha-преобразование - 3 (lg, alexott, vshabanoff)
    conversion        = преобразование - 3 (lg, alexott, vshabanoff)

    alpha-conversion  = alpha-конверсия - 0
    conversion        = конверсия - 0
}}}

давайте до оканчания голосования пока оставим как есть, а там уже подправим если что ..

---

verification - было внесено предложение "верификация" (по сравнению с "проверкой" подразумевает формальное доказательство того, что заявленные характеристики программы выполняются).

---

floating point - предлагается перевод "плавающая точка" (используется в 3-м издании "Искусства программирования", в "Достоверных вычислениях ..." Кулиша). -- lambda.henchman

{{{
    плавающая точка   - 1 (lambda.henchman)
    плавающая запятая - 2 (lg, vshabanoff)
}}}

---

Хвостовая рекурсия -- разновидность рекурсии, а рекурсия это СПОСОБ
определения функций.  Хвостато рекурсивная фнукция -- функция
опредлённая способом хвостовой рекурсии, но говорить хвостато
рекурсивная как-то коряво, поэтому для термина 'tail recursive
function' я предлагаю 'функция с хвостовой рекурсией' --lg
